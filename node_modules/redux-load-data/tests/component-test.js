import expect from 'expect';
import React from 'react';
import { render } from 'enzyme';
import { Provider } from 'react-redux';
import { createStore, combineReducers } from 'redux';
import sinon from 'sinon';
import Component, { dataReducer } from '../src/';

describe('Component', () => {
  let node;
  let store;
  let server;

  beforeEach(() => {
    node = document.createElement('div');
    store = createStore(
      combineReducers({
        data: dataReducer(),
      }),
    );
    server = sinon.fakeServer.create();
  });

  afterEach(() => {
    server.restore();
  });

  it('displays nothing by default', () => {
    render(
      <Provider store={store}>
        <Component url="/" keyPath={['test']} />
      </Provider>,
      node,
      () => {
        expect(node.innerHTML).toEqual('<!-- react-empty: 1 -->');
      },
    );
  });

  it('displays debug info', () => {
    render(
      <Provider store={store}>
        <Component url="/" keyPath={['test']} debug />
      </Provider>,
      node,
      () => {
        expect(node.innerHTML).toNotEqual('<!-- react-empty: 1 -->');
      },
    );
  });

  it('request event fires', () => {
    render(
      <Provider store={store}>
        <Component url="/test" keyPath={['test']} />
      </Provider>,
      node,
      () => {
        expect(store.getState().data.toJS()).toEqual({
          test: { error: false, loading: true },
        });
      },
    );
  });

  it('response event fires on success', (done) => {
    render(
      <Provider store={store}>
        <Component url="/test" keyPath={['test']} />
      </Provider>,
      node,
      () => {
        server.requests[0].respond(
          200,
          { 'Content-Type': 'application/json' },
          JSON.stringify({ test: true }),
        );
        setTimeout(() => {
          expect(store.getState().data.getIn(['test', 'loading'])).toEqual(false);
          expect(store.getState().data.getIn(['test', 'data']).toJS()).toEqual({
            test: true,
          });
          done();
        }, 100);
      },
    );
  });

  it('error event fires on failure', (done) => {
    render(
      <Provider store={store}>
        <Component url="/test" keyPath={['test']} />
      </Provider>,
      node,
      () => {
        server.requests[0].respond(404);
        setTimeout(() => {
          expect(store.getState().data.getIn(['test', 'loading'])).toEqual(false);
          expect(store.getState().data.getIn(['test', 'error'])).toEqual(true);
          done();
        }, 100);
      },
    );
  });

  it('refreshInterval works', (done) => {
    render(
      <Provider store={store}>
        <Component url="/test" keyPath={['test']} refreshInterval={100} />
      </Provider>,
      node,
      () => {
        server.respondWith(
          200,
          { 'Content-Type': 'application/json' },
          JSON.stringify({ test: true }),
        );
        server.autoRespond = true;
        server.respondImmediately = true;

        setTimeout(() => {
          expect(server.requests.length).toBe(10);
          done();
        }, 950);
      },
    );
  });
});
